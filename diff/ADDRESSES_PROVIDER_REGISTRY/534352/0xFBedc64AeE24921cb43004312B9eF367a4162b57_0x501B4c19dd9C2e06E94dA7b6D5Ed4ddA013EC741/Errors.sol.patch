===================================================================
--- src/core/contracts/protocol/libraries/helpers/Errors.sol
+++ src/contracts/protocol/libraries/helpers/Errors.sol
@@ -6,96 +6,93 @@
  * @author Aave
  * @notice Defines the error messages emitted by the different contracts of the Aave protocol
  */
 library Errors {
-    string public constant CALLER_NOT_POOL_ADMIN = "1"; // 'The caller of the function is not a pool admin'
-    string public constant CALLER_NOT_EMERGENCY_ADMIN = "2"; // 'The caller of the function is not an emergency admin'
-    string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = "3"; // 'The caller of the function is not a pool or emergency admin'
-    string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = "4"; // 'The caller of the function is not a risk or pool admin'
-    string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = "5"; // 'The caller of the function is not an asset listing or pool admin'
-    string public constant CALLER_NOT_BRIDGE = "6"; // 'The caller of the function is not a bridge'
-    string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = "7"; // 'Pool addresses provider is not registered'
-    string public constant INVALID_ADDRESSES_PROVIDER_ID = "8"; // 'Invalid id for the pool addresses provider'
-    string public constant NOT_CONTRACT = "9"; // 'Address is not a contract'
-    string public constant CALLER_NOT_POOL_CONFIGURATOR = "10"; // 'The caller of the function is not the pool configurator'
-    string public constant CALLER_NOT_ATOKEN = "11"; // 'The caller of the function is not an AToken'
-    string public constant INVALID_ADDRESSES_PROVIDER = "12"; // 'The address of the pool addresses provider is invalid'
-    string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = "13"; // 'Invalid return value of the flashloan executor function'
-    string public constant RESERVE_ALREADY_ADDED = "14"; // 'Reserve has already been added to reserve list'
-    string public constant NO_MORE_RESERVES_ALLOWED = "15"; // 'Maximum amount of reserves in the pool reached'
-    string public constant EMODE_CATEGORY_RESERVED = "16"; // 'Zero eMode category is reserved for volatile heterogeneous assets'
-    string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = "17"; // 'Invalid eMode category assignment to asset'
-    string public constant RESERVE_LIQUIDITY_NOT_ZERO = "18"; // 'The liquidity of the reserve needs to be 0'
-    string public constant FLASHLOAN_PREMIUM_INVALID = "19"; // 'Invalid flashloan premium'
-    string public constant INVALID_RESERVE_PARAMS = "20"; // 'Invalid risk parameters for the reserve'
-    string public constant INVALID_EMODE_CATEGORY_PARAMS = "21"; // 'Invalid risk parameters for the eMode category'
-    string public constant BRIDGE_PROTOCOL_FEE_INVALID = "22"; // 'Invalid bridge protocol fee'
-    string public constant CALLER_MUST_BE_POOL = "23"; // 'The caller of this function must be a pool'
-    string public constant INVALID_MINT_AMOUNT = "24"; // 'Invalid amount to mint'
-    string public constant INVALID_BURN_AMOUNT = "25"; // 'Invalid amount to burn'
-    string public constant INVALID_AMOUNT = "26"; // 'Amount must be greater than 0'
-    string public constant RESERVE_INACTIVE = "27"; // 'Action requires an active reserve'
-    string public constant RESERVE_FROZEN = "28"; // 'Action cannot be performed because the reserve is frozen'
-    string public constant RESERVE_PAUSED = "29"; // 'Action cannot be performed because the reserve is paused'
-    string public constant BORROWING_NOT_ENABLED = "30"; // 'Borrowing is not enabled'
-    string public constant STABLE_BORROWING_NOT_ENABLED = "31"; // 'Stable borrowing is not enabled'
-    string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = "32"; // 'User cannot withdraw more than the available balance'
-    string public constant INVALID_INTEREST_RATE_MODE_SELECTED = "33"; // 'Invalid interest rate mode selected'
-    string public constant COLLATERAL_BALANCE_IS_ZERO = "34"; // 'The collateral balance is 0'
-    string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD =
-        "35"; // 'Health factor is lesser than the liquidation threshold'
-    string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = "36"; // 'There is not enough collateral to cover a new borrow'
-    string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = "37"; // 'Collateral is (mostly) the same currency that is being borrowed'
-    string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = "38"; // 'The requested amount is greater than the max loan size in stable rate mode'
-    string public constant NO_DEBT_OF_SELECTED_TYPE = "39"; // 'For repayment of a specific type of debt, the user needs to have debt that type'
-    string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = "40"; // 'To repay on behalf of a user an explicit amount to repay is needed'
-    string public constant NO_OUTSTANDING_STABLE_DEBT = "41"; // 'User does not have outstanding stable rate debt on this reserve'
-    string public constant NO_OUTSTANDING_VARIABLE_DEBT = "42"; // 'User does not have outstanding variable rate debt on this reserve'
-    string public constant UNDERLYING_BALANCE_ZERO = "43"; // 'The underlying balance needs to be greater than 0'
-    string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = "44"; // 'Interest rate rebalance conditions were not met'
-    string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = "45"; // 'Health factor is not below the threshold'
-    string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = "46"; // 'The collateral chosen cannot be liquidated'
-    string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = "47"; // 'User did not borrow the specified currency'
-    string public constant INCONSISTENT_FLASHLOAN_PARAMS = "49"; // 'Inconsistent flashloan parameters'
-    string public constant BORROW_CAP_EXCEEDED = "50"; // 'Borrow cap is exceeded'
-    string public constant SUPPLY_CAP_EXCEEDED = "51"; // 'Supply cap is exceeded'
-    string public constant UNBACKED_MINT_CAP_EXCEEDED = "52"; // 'Unbacked mint cap is exceeded'
-    string public constant DEBT_CEILING_EXCEEDED = "53"; // 'Debt ceiling is exceeded'
-    string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = "54"; // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'
-    string public constant STABLE_DEBT_NOT_ZERO = "55"; // 'Stable debt supply is not zero'
-    string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = "56"; // 'Variable debt supply is not zero'
-    string public constant LTV_VALIDATION_FAILED = "57"; // 'Ltv validation failed'
-    string public constant INCONSISTENT_EMODE_CATEGORY = "58"; // 'Inconsistent eMode category'
-    string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = "59"; // 'Price oracle sentinel validation failed'
-    string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = "60"; // 'Asset is not borrowable in isolation mode'
-    string public constant RESERVE_ALREADY_INITIALIZED = "61"; // 'Reserve has already been initialized'
-    string public constant USER_IN_ISOLATION_MODE_OR_LTV_ZERO = "62"; // 'User is in isolation mode or ltv is zero'
-    string public constant INVALID_LTV = "63"; // 'Invalid ltv parameter for the reserve'
-    string public constant INVALID_LIQ_THRESHOLD = "64"; // 'Invalid liquidity threshold parameter for the reserve'
-    string public constant INVALID_LIQ_BONUS = "65"; // 'Invalid liquidity bonus parameter for the reserve'
-    string public constant INVALID_DECIMALS = "66"; // 'Invalid decimals parameter of the underlying asset of the reserve'
-    string public constant INVALID_RESERVE_FACTOR = "67"; // 'Invalid reserve factor parameter for the reserve'
-    string public constant INVALID_BORROW_CAP = "68"; // 'Invalid borrow cap for the reserve'
-    string public constant INVALID_SUPPLY_CAP = "69"; // 'Invalid supply cap for the reserve'
-    string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = "70"; // 'Invalid liquidation protocol fee for the reserve'
-    string public constant INVALID_EMODE_CATEGORY = "71"; // 'Invalid eMode category for the reserve'
-    string public constant INVALID_UNBACKED_MINT_CAP = "72"; // 'Invalid unbacked mint cap for the reserve'
-    string public constant INVALID_DEBT_CEILING = "73"; // 'Invalid debt ceiling for the reserve
-    string public constant INVALID_RESERVE_INDEX = "74"; // 'Invalid reserve index'
-    string public constant ACL_ADMIN_CANNOT_BE_ZERO = "75"; // 'ACL admin cannot be set to the zero address'
-    string public constant INCONSISTENT_PARAMS_LENGTH = "76"; // 'Array parameters that should be equal length are not'
-    string public constant ZERO_ADDRESS_NOT_VALID = "77"; // 'Zero address not valid'
-    string public constant INVALID_EXPIRATION = "78"; // 'Invalid expiration'
-    string public constant INVALID_SIGNATURE = "79"; // 'Invalid signature'
-    string public constant OPERATION_NOT_SUPPORTED = "80"; // 'Operation not supported'
-    string public constant DEBT_CEILING_NOT_ZERO = "81"; // 'Debt ceiling is not zero'
-    string public constant ASSET_NOT_LISTED = "82"; // 'Asset is not listed'
-    string public constant INVALID_OPTIMAL_USAGE_RATIO = "83"; // 'Invalid optimal usage ratio'
-    string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = "84"; // 'Invalid optimal stable to total debt ratio'
-    string public constant UNDERLYING_CANNOT_BE_RESCUED = "85"; // 'The underlying asset cannot be rescued'
-    string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = "86"; // 'Reserve has already been added to reserve list'
-    string public constant POOL_ADDRESSES_DO_NOT_MATCH = "87"; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'
-    string public constant STABLE_BORROWING_ENABLED = "88"; // 'Stable borrowing is enabled'
-    string public constant SILOED_BORROWING_VIOLATION = "89"; // 'User is trying to borrow multiple assets including a siloed one'
-    string public constant RESERVE_DEBT_NOT_ZERO = "90"; // the total debt of the reserve needs to be 0
-    string public constant FLASHLOAN_DISABLED = "91"; // FlashLoaning for this asset is disabled
+    error CallerNotPoolAdmin(); // 'The caller of the function is not a pool admin'
+    error CallerNotPoolOrEmergencyAdmin(); // 'The caller of the function is not a pool or emergency admin'
+    error CallerNotRiskOrPoolAdmin(); // 'The caller of the function is not a risk or pool admin'
+    error CallerNotAssetListingOrPoolAdmin(); // 'The caller of the function is not an asset listing or pool admin'
+    error AddressesProviderNotRegistered(); // 'Pool addresses provider is not registered'
+    error InvalidAddressesProviderId(); // 'Invalid id for the pool addresses provider'
+    error NotContract(); // 'Address is not a contract'
+    error CallerNotPoolConfigurator(); // 'The caller of the function is not the pool configurator'
+    error CallerNotAToken(); // 'The caller of the function is not an AToken'
+    error InvalidAddressesProvider(); // 'The address of the pool addresses provider is invalid'
+    error InvalidFlashloanExecutorReturn(); // 'Invalid return value of the flashloan executor function'
+    error ReserveAlreadyAdded(); // 'Reserve has already been added to reserve list'
+    error NoMoreReservesAllowed(); // 'Maximum amount of reserves in the pool reached'
+    error EModeCategoryReserved(); // 'Zero eMode category is reserved for volatile heterogeneous assets'
+    error ReserveLiquidityNotZero(); // 'The liquidity of the reserve needs to be 0'
+    error FlashloanPremiumInvalid(); // 'Invalid flashloan premium'
+    error InvalidReserveParams(); // 'Invalid risk parameters for the reserve'
+    error InvalidEmodeCategoryParams(); // 'Invalid risk parameters for the eMode category'
+    error CallerMustBePool(); // 'The caller of this function must be a pool'
+    error InvalidMintAmount(); // 'Invalid amount to mint'
+    error InvalidBurnAmount(); // 'Invalid amount to burn'
+    error InvalidAmount(); // 'Amount must be greater than 0'
+    error ReserveInactive(); // 'Action requires an active reserve'
+    error ReserveFrozen(); // 'Action cannot be performed because the reserve is frozen'
+    error ReservePaused(); // 'Action cannot be performed because the reserve is paused'
+    error BorrowingNotEnabled(); // 'Borrowing is not enabled'
+    error NotEnoughAvailableUserBalance(); // 'User cannot withdraw more than the available balance'
+    error InvalidInterestRateModeSelected(); // 'Invalid interest rate mode selected'
+    error HealthFactorLowerThanLiquidationThreshold(); // 'Health factor is below the liquidation threshold'
+    error CollateralCannotCoverNewBorrow(); // 'There is not enough collateral to cover a new borrow'
+    error NoDebtOfSelectedType(); // 'For repayment of a specific type of debt, the user needs to have debt that type'
+    error NoExplicitAmountToRepayOnBehalf(); // 'To repay on behalf of a user an explicit amount to repay is needed'
+    error UnderlyingBalanceZero(); // 'The underlying balance needs to be greater than 0'
+    error HealthFactorNotBelowThreshold(); // 'Health factor is not below the threshold'
+    error CollateralCannotBeLiquidated(); // 'The collateral chosen cannot be liquidated'
+    error SpecifiedCurrencyNotBorrowedByUser(); // 'User did not borrow the specified currency'
+    error InconsistentFlashloanParams(); // 'Inconsistent flashloan parameters'
+    error BorrowCapExceeded(); // 'Borrow cap is exceeded'
+    error SupplyCapExceeded(); // 'Supply cap is exceeded'
+    error DebtCeilingExceeded(); // 'Debt ceiling is exceeded'
+    error UnderlyingClaimableRightsNotZero(); // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'
+    error VariableDebtSupplyNotZero(); // 'Variable debt supply is not zero'
+    error LtvValidationFailed(); // 'Ltv validation failed'
+    error InconsistentEModeCategory(); // 'Inconsistent eMode category'
+    error PriceOracleSentinelCheckFailed(); // 'Price oracle sentinel validation failed'
+    error AssetNotBorrowableInIsolation(); // 'Asset is not borrowable in isolation mode'
+    error ReserveAlreadyInitialized(); // 'Reserve has already been initialized'
+    error UserInIsolationModeOrLtvZero(); // 'User is in isolation mode or ltv is zero'
+    error InvalidLtv(); // 'Invalid ltv parameter for the reserve'
+    error InvalidLiquidationThreshold(); // 'Invalid liquidity threshold parameter for the reserve'
+    error InvalidLiquidationBonus(); // 'Invalid liquidity bonus parameter for the reserve'
+    error InvalidDecimals(); // 'Invalid decimals parameter of the underlying asset of the reserve'
+    error InvalidReserveFactor(); // 'Invalid reserve factor parameter for the reserve'
+    error InvalidBorrowCap(); // 'Invalid borrow cap for the reserve'
+    error InvalidSupplyCap(); // 'Invalid supply cap for the reserve'
+    error InvalidLiquidationProtocolFee(); // 'Invalid liquidation protocol fee for the reserve'
+    error InvalidDebtCeiling(); // 'Invalid debt ceiling for the reserve'
+    error InvalidReserveIndex(); // 'Invalid reserve index'
+    error AclAdminCannotBeZero(); // 'ACL admin cannot be set to the zero address'
+    error InconsistentParamsLength(); // 'Array parameters that should be equal length are not'
+    error ZeroAddressNotValid(); // 'Zero address not valid'
+    error InvalidExpiration(); // 'Invalid expiration'
+    error InvalidSignature(); // 'Invalid signature'
+    error OperationNotSupported(); // 'Operation not supported'
+    error DebtCeilingNotZero(); // 'Debt ceiling is not zero'
+    error AssetNotListed(); // 'Asset is not listed'
+    error InvalidOptimalUsageRatio(); // 'Invalid optimal usage ratio'
+    error UnderlyingCannotBeRescued(); // 'The underlying asset cannot be rescued'
+    error AddressesProviderAlreadyAdded(); // 'Reserve has already been added to reserve list'
+    error PoolAddressesDoNotMatch(); // 'The token implementation pool address and the pool address provided by the initializing pool do not match'
+    error SiloedBorrowingViolation(); // 'User is trying to borrow multiple assets including a siloed one'
+    error ReserveDebtNotZero(); // the total debt of the reserve needs to be 0
+    error FlashloanDisabled(); // FlashLoaning for this asset is disabled
+    error InvalidMaxRate(); // The expect maximum borrow rate is invalid
+    error WithdrawToAToken(); // Withdrawing to the aToken is not allowed
+    error SupplyToAToken(); // Supplying to the aToken is not allowed
+    error Slope2MustBeGteSlope1(); // Variable interest rate slope 2 can not be lower than slope 1
+    error CallerNotRiskOrPoolOrEmergencyAdmin(); // 'The caller of the function is not a risk, pool or emergency admin'
+    error LiquidationGraceSentinelCheckFailed(); // 'Liquidation grace sentinel validation failed'
+    error InvalidGracePeriod(); // Grace period above a valid range
+    error InvalidFreezeState(); // Reserve is already in the passed freeze state
+    error NotBorrowableInEMode(); // Asset not borrowable in eMode
+    error CallerNotUmbrella(); // The caller of the function is not the umbrella contract
+    error ReserveNotInDeficit(); // The reserve is not in deficit
+    error MustNotLeaveDust(); // Below a certain threshold liquidators need to take the full position
+    error UserCannotHaveDebt(); // Thrown when a user tries to interact with a method that requires a position without debt
+    error SelfLiquidation(); // Thrown when a user tries to liquidate themselves
+    error CallerNotPositionManager(); // Thrown when the caller has not been enabled as a position manager of the on-behalf-of user
 }
