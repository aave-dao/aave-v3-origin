===================================================================
--- lib/aave-v3-origin/src/contracts/protocol/libraries/configuration/ReserveConfiguration.sol
+++ src/contracts/protocol/libraries/configuration/ReserveConfiguration.sol
@@ -25,11 +25,12 @@
     uint256 internal constant RESERVE_FACTOR_MASK =            0x00000000000000000000000000000000000000000000FFFF0000000000000000; // prettier-ignore
     uint256 internal constant BORROW_CAP_MASK =                0x00000000000000000000000000000000000FFFFFFFFF00000000000000000000; // prettier-ignore
     uint256 internal constant SUPPLY_CAP_MASK =                0x00000000000000000000000000FFFFFFFFF00000000000000000000000000000; // prettier-ignore
     uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0x0000000000000000000000FFFF00000000000000000000000000000000000000; // prettier-ignore
-    //@notice there is an unoccupied hole of 8 bits from 168 to 176 left from pre 3.2 eModeCategory
-    uint256 internal constant UNBACKED_MINT_CAP_MASK =         0x00000000000FFFFFFFFF00000000000000000000000000000000000000000000; // prettier-ignore
+    //@notice there is an unoccupied hole of 8 bits from 168 to 175 left from pre 3.2 eModeCategory
+    //@notice there is an unoccupied hole of 34 bits from 176 to 211 left from pre 3.4 unbackedMintCap
     uint256 internal constant DEBT_CEILING_MASK =              0x0FFFFFFFFFF00000000000000000000000000000000000000000000000000000; // prettier-ignore
+    //@notice DEPRECATED: in v3.4 all reserves have virtual accounting enabled
     uint256 internal constant VIRTUAL_ACC_ACTIVE_MASK =        0x1000000000000000000000000000000000000000000000000000000000000000; // prettier-ignore
 
     /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed
     uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;
@@ -45,11 +46,12 @@
     uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;
     uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;
     uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;
     uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;
-    //@notice there is an unoccupied hole of 8 bits from 168 to 176 left from pre 3.2 eModeCategory
-    uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;
+    //@notice there is an unoccupied hole of 8 bits from 168 to 175 left from pre 3.2 eModeCategory
+    //@notice there is an unoccupied hole of 34 bits from 176 to 211 left from pre 3.4 unbackedMintCap
     uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;
+    //@notice DEPRECATED: in v3.4 all reserves have virtual accounting enabled
     uint256 internal constant VIRTUAL_ACC_START_BIT_POSITION = 252;
 
     uint256 internal constant MAX_VALID_LTV = 65535;
     uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;
@@ -58,9 +60,8 @@
     uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65535;
     uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;
     uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;
     uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;
-    uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;
     uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;
 
     uint256 public constant DEBT_CEILING_DECIMALS = 2;
     uint16 public constant MAX_RESERVES_COUNT = 128;
@@ -73,9 +74,9 @@
     function setLtv(
         DataTypes.ReserveConfigurationMap memory self,
         uint256 ltv
     ) internal pure {
-        require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);
+        require(ltv <= MAX_VALID_LTV, Errors.InvalidLtv());
 
         self.data = (self.data & ~LTV_MASK) | ltv;
     }
 
@@ -100,9 +101,9 @@
         uint256 threshold
     ) internal pure {
         require(
             threshold <= MAX_VALID_LIQUIDATION_THRESHOLD,
-            Errors.INVALID_LIQ_THRESHOLD
+            Errors.InvalidLiquidationThreshold()
         );
 
         self.data =
             (self.data & ~LIQUIDATION_THRESHOLD_MASK) |
@@ -130,9 +131,12 @@
     function setLiquidationBonus(
         DataTypes.ReserveConfigurationMap memory self,
         uint256 bonus
     ) internal pure {
-        require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);
+        require(
+            bonus <= MAX_VALID_LIQUIDATION_BONUS,
+            Errors.InvalidLiquidationBonus()
+        );
 
         self.data =
             (self.data & ~LIQUIDATION_BONUS_MASK) |
             (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);
@@ -159,9 +163,9 @@
     function setDecimals(
         DataTypes.ReserveConfigurationMap memory self,
         uint256 decimals
     ) internal pure {
-        require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);
+        require(decimals <= MAX_VALID_DECIMALS, Errors.InvalidDecimals());
 
         self.data =
             (self.data & ~DECIMALS_MASK) |
             (decimals << RESERVE_DECIMALS_START_BIT_POSITION);
@@ -350,9 +354,9 @@
         uint256 reserveFactor
     ) internal pure {
         require(
             reserveFactor <= MAX_VALID_RESERVE_FACTOR,
-            Errors.INVALID_RESERVE_FACTOR
+            Errors.InvalidReserveFactor()
         );
 
         self.data =
             (self.data & ~RESERVE_FACTOR_MASK) |
@@ -380,9 +384,9 @@
     function setBorrowCap(
         DataTypes.ReserveConfigurationMap memory self,
         uint256 borrowCap
     ) internal pure {
-        require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);
+        require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.InvalidBorrowCap());
 
         self.data =
             (self.data & ~BORROW_CAP_MASK) |
             (borrowCap << BORROW_CAP_START_BIT_POSITION);
@@ -407,9 +411,9 @@
     function setSupplyCap(
         DataTypes.ReserveConfigurationMap memory self,
         uint256 supplyCap
     ) internal pure {
-        require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);
+        require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.InvalidSupplyCap());
 
         self.data =
             (self.data & ~SUPPLY_CAP_MASK) |
             (supplyCap << SUPPLY_CAP_START_BIT_POSITION);
@@ -434,9 +438,9 @@
     function setDebtCeiling(
         DataTypes.ReserveConfigurationMap memory self,
         uint256 ceiling
     ) internal pure {
-        require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);
+        require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.InvalidDebtCeiling());
 
         self.data =
             (self.data & ~DEBT_CEILING_MASK) |
             (ceiling << DEBT_CEILING_START_BIT_POSITION);
@@ -464,9 +468,9 @@
         uint256 liquidationProtocolFee
     ) internal pure {
         require(
             liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE,
-            Errors.INVALID_LIQUIDATION_PROTOCOL_FEE
+            Errors.InvalidLiquidationProtocolFee()
         );
 
         self.data =
             (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) |
@@ -487,40 +491,8 @@
             LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;
     }
 
     /**
-     * @notice Sets the unbacked mint cap of the reserve
-     * @param self The reserve configuration
-     * @param unbackedMintCap The unbacked mint cap
-     */
-    function setUnbackedMintCap(
-        DataTypes.ReserveConfigurationMap memory self,
-        uint256 unbackedMintCap
-    ) internal pure {
-        require(
-            unbackedMintCap <= MAX_VALID_UNBACKED_MINT_CAP,
-            Errors.INVALID_UNBACKED_MINT_CAP
-        );
-
-        self.data =
-            (self.data & ~UNBACKED_MINT_CAP_MASK) |
-            (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);
-    }
-
-    /**
-     * @dev Gets the unbacked mint cap of the reserve
-     * @param self The reserve configuration
-     * @return The unbacked mint cap
-     */
-    function getUnbackedMintCap(
-        DataTypes.ReserveConfigurationMap memory self
-    ) internal pure returns (uint256) {
-        return
-            (self.data & UNBACKED_MINT_CAP_MASK) >>
-            UNBACKED_MINT_CAP_START_BIT_POSITION;
-    }
-
-    /**
      * @notice Sets the flashloanable flag for the reserve
      * @param self The reserve configuration
      * @param flashLoanEnabled True if the asset is flashloanable, false otherwise
      */
@@ -545,38 +517,22 @@
         return (self.data & FLASHLOAN_ENABLED_MASK) != 0;
     }
 
     /**
-     * @notice Sets the virtual account active/not state of the reserve
+     * @notice Forcefully set the virtual account active state of the reserve to `true`
+     * @dev DEPRECATED: in v3.4 all reserves have virtual accounting enabled.
+     * The flag is carried along for backward compatibility with integrations directly querying the configuration.
      * @param self The reserve configuration
-     * @param active The active state
      */
     function setVirtualAccActive(
-        DataTypes.ReserveConfigurationMap memory self,
-        bool active
+        DataTypes.ReserveConfigurationMap memory self
     ) internal pure {
         self.data =
             (self.data & ~VIRTUAL_ACC_ACTIVE_MASK) |
-            (uint256(active ? 1 : 0) << VIRTUAL_ACC_START_BIT_POSITION);
+            (uint256(1) << VIRTUAL_ACC_START_BIT_POSITION);
     }
 
     /**
-     * @notice Gets the virtual account active/not state of the reserve
-     * @dev The state should be true for all normal assets and should be false
-     * Virtual accounting being disabled means that the asset:
-     * - is GHO
-     * - can never be supplied
-     * - the interest rate strategy is not influenced by the virtual balance
-     * @param self The reserve configuration
-     * @return The active state
-     */
-    function getIsVirtualAccActive(
-        DataTypes.ReserveConfigurationMap memory self
-    ) internal pure returns (bool) {
-        return (self.data & VIRTUAL_ACC_ACTIVE_MASK) != 0;
-    }
-
-    /**
      * @notice Gets the configuration flags of the reserve
      * @param self The reserve configuration
      * @return The state flag representing active
      * @return The state flag representing frozen
