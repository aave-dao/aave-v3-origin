Index: src/contracts/helpers/AaveProtocolDataProvider.sol
===================================================================
--- src/contracts/helpers/AaveProtocolDataProvider.sol
+++ src/contracts/helpers/AaveProtocolDataProvider.sol
@@ -9,8 +9,9 @@
 import {IPoolAddressesProvider} from "../interfaces/IPoolAddressesProvider.sol";
 import {IVariableDebtToken} from "../interfaces/IVariableDebtToken.sol";
 import {IPool} from "../interfaces/IPool.sol";
 import {IPoolDataProvider} from "../interfaces/IPoolDataProvider.sol";
+import {Errors} from "../protocol/libraries/helpers/Errors.sol";
 
 /**
  * @title AaveProtocolDataProvider
  * @author Aave
@@ -26,14 +27,25 @@
 
     /// @inheritdoc IPoolDataProvider
     IPoolAddressesProvider public immutable ADDRESSES_PROVIDER;
 
+    /// @inheritdoc IPoolDataProvider
+    IPool public immutable POOL;
+
     /**
      * @notice Constructor
      * @param addressesProvider The address of the PoolAddressesProvider contract
      */
     constructor(IPoolAddressesProvider addressesProvider) {
         ADDRESSES_PROVIDER = addressesProvider;
+
+        address pool = addressesProvider.getPool();
+        require(pool != address(0), Errors.ZeroAddressNotValid());
+
+        // @dev The pool can be immutable, because in practice it never changes after initialization.
+        // The reason why it is not an actual `immutable` on `ADDRESSES_PROVIDER` is that there is a cross reference between ADDRESSES_PROVIDER <> Pool,
+        // which in turn makes is complicated to have it `immutable` on both contracts.
+        POOL = IPool(pool);
     }
 
     /// @inheritdoc IPoolDataProvider
     function getAllReservesTokens()
@@ -41,10 +53,9 @@
         view
         override
         returns (TokenData[] memory)
     {
-        IPool pool = IPool(ADDRESSES_PROVIDER.getPool());
-        address[] memory reserves = pool.getReservesList();
+        address[] memory reserves = POOL.getReservesList();
         TokenData[] memory reservesTokens = new TokenData[](reserves.length);
         for (uint256 i = 0; i < reserves.length; i++) {
             if (reserves[i] == MKR) {
                 reservesTokens[i] = TokenData({
@@ -74,17 +85,15 @@
         view
         override
         returns (TokenData[] memory)
     {
-        IPool pool = IPool(ADDRESSES_PROVIDER.getPool());
-        address[] memory reserves = pool.getReservesList();
+        address[] memory reserves = POOL.getReservesList();
         TokenData[] memory aTokens = new TokenData[](reserves.length);
         for (uint256 i = 0; i < reserves.length; i++) {
-            DataTypes.ReserveDataLegacy memory reserveData = pool
-                .getReserveData(reserves[i]);
+            address aTokenAddress = POOL.getReserveAToken(reserves[i]);
             aTokens[i] = TokenData({
-                symbol: IERC20Detailed(reserveData.aTokenAddress).symbol(),
-                tokenAddress: reserveData.aTokenAddress
+                symbol: IERC20Detailed(aTokenAddress).symbol(),
+                tokenAddress: aTokenAddress
             });
         }
         return aTokens;
     }
@@ -108,11 +117,10 @@
             bool isActive,
             bool isFrozen
         )
     {
-        DataTypes.ReserveConfigurationMap memory configuration = IPool(
-            ADDRESSES_PROVIDER.getPool()
-        ).getConfiguration(asset);
+        DataTypes.ReserveConfigurationMap memory configuration = POOL
+            .getConfiguration(asset);
 
         (
             ltv,
             liquidationThreshold,
@@ -132,60 +140,44 @@
     /// @inheritdoc IPoolDataProvider
     function getReserveCaps(
         address asset
     ) external view override returns (uint256 borrowCap, uint256 supplyCap) {
-        (borrowCap, supplyCap) = IPool(ADDRESSES_PROVIDER.getPool())
-            .getConfiguration(asset)
-            .getCaps();
+        (borrowCap, supplyCap) = POOL.getConfiguration(asset).getCaps();
     }
 
     /// @inheritdoc IPoolDataProvider
     function getPaused(
         address asset
     ) external view override returns (bool isPaused) {
-        (, , , isPaused) = IPool(ADDRESSES_PROVIDER.getPool())
-            .getConfiguration(asset)
-            .getFlags();
+        (, , , isPaused) = POOL.getConfiguration(asset).getFlags();
     }
 
     /// @inheritdoc IPoolDataProvider
     function getSiloedBorrowing(
         address asset
     ) external view override returns (bool) {
-        return
-            IPool(ADDRESSES_PROVIDER.getPool())
-                .getConfiguration(asset)
-                .getSiloedBorrowing();
+        return POOL.getConfiguration(asset).getSiloedBorrowing();
     }
 
     /// @inheritdoc IPoolDataProvider
     function getLiquidationProtocolFee(
         address asset
     ) external view override returns (uint256) {
-        return
-            IPool(ADDRESSES_PROVIDER.getPool())
-                .getConfiguration(asset)
-                .getLiquidationProtocolFee();
+        return POOL.getConfiguration(asset).getLiquidationProtocolFee();
     }
 
     /// @inheritdoc IPoolDataProvider
     function getUnbackedMintCap(
-        address asset
-    ) external view override returns (uint256) {
-        return
-            IPool(ADDRESSES_PROVIDER.getPool())
-                .getConfiguration(asset)
-                .getUnbackedMintCap();
+        address
+    ) external pure override returns (uint256) {
+        return 0;
     }
 
     /// @inheritdoc IPoolDataProvider
     function getDebtCeiling(
         address asset
     ) external view override returns (uint256) {
-        return
-            IPool(ADDRESSES_PROVIDER.getPool())
-                .getConfiguration(asset)
-                .getDebtCeiling();
+        return POOL.getConfiguration(asset).getDebtCeiling();
     }
 
     /// @inheritdoc IPoolDataProvider
     function getDebtCeilingDecimals() external pure override returns (uint256) {
@@ -199,29 +191,27 @@
         external
         view
         override
         returns (
-            uint256 unbacked,
+            uint256 /* unbacked */,
             uint256 accruedToTreasuryScaled,
             uint256 totalAToken,
-            uint256 totalStableDebt,
+            uint256,
             uint256 totalVariableDebt,
             uint256 liquidityRate,
             uint256 variableBorrowRate,
-            uint256 stableBorrowRate,
-            uint256 averageStableBorrowRate,
+            uint256,
+            uint256,
             uint256 liquidityIndex,
             uint256 variableBorrowIndex,
             uint40 lastUpdateTimestamp
         )
     {
-        DataTypes.ReserveDataLegacy memory reserve = IPool(
-            ADDRESSES_PROVIDER.getPool()
-        ).getReserveData(asset);
+        DataTypes.ReserveDataLegacy memory reserve = POOL.getReserveData(asset);
 
         // @notice all stable debt related parameters deprecated in v3.2.0
         return (
-            reserve.unbacked,
+            0, // @dev unbacked is deprecated from v3.4.0, always zero, never used
             reserve.accruedToTreasury,
             IERC20Detailed(reserve.aTokenAddress).totalSupply(),
             0,
             IERC20Detailed(reserve.variableDebtTokenAddress).totalSupply(),
@@ -238,22 +228,20 @@
     /// @inheritdoc IPoolDataProvider
     function getATokenTotalSupply(
         address asset
     ) external view override returns (uint256) {
-        DataTypes.ReserveDataLegacy memory reserve = IPool(
-            ADDRESSES_PROVIDER.getPool()
-        ).getReserveData(asset);
-        return IERC20Detailed(reserve.aTokenAddress).totalSupply();
+        address aTokenAddress = POOL.getReserveAToken(asset);
+        return IERC20Detailed(aTokenAddress).totalSupply();
     }
 
     /// @inheritdoc IPoolDataProvider
     function getTotalDebt(
         address asset
     ) external view override returns (uint256) {
-        DataTypes.ReserveDataLegacy memory reserve = IPool(
-            ADDRESSES_PROVIDER.getPool()
-        ).getReserveData(asset);
-        return IERC20Detailed(reserve.variableDebtTokenAddress).totalSupply();
+        address variableDebtTokenAddress = POOL.getReserveVariableDebtToken(
+            asset
+        );
+        return IERC20Detailed(variableDebtTokenAddress).totalSupply();
     }
 
     /// @inheritdoc IPoolDataProvider
     function getUserReserveData(
@@ -274,15 +262,12 @@
             uint40 stableRateLastUpdated,
             bool usageAsCollateralEnabled
         )
     {
-        DataTypes.ReserveDataLegacy memory reserve = IPool(
-            ADDRESSES_PROVIDER.getPool()
-        ).getReserveData(asset);
+        DataTypes.ReserveDataLegacy memory reserve = POOL.getReserveData(asset);
 
-        DataTypes.UserConfigurationMap memory userConfig = IPool(
-            ADDRESSES_PROVIDER.getPool()
-        ).getUserConfiguration(user);
+        DataTypes.UserConfigurationMap memory userConfig = POOL
+            .getUserConfiguration(user);
 
         currentATokenBalance = IERC20Detailed(reserve.aTokenAddress).balanceOf(
             user
         );
@@ -311,59 +296,50 @@
             address stableDebtTokenAddress,
             address variableDebtTokenAddress
         )
     {
-        DataTypes.ReserveDataLegacy memory reserve = IPool(
-            ADDRESSES_PROVIDER.getPool()
-        ).getReserveData(asset);
-
         // @notice all stable debt related parameters deprecated in v3.2.0
         return (
-            reserve.aTokenAddress,
+            POOL.getReserveAToken(asset),
             address(0),
-            reserve.variableDebtTokenAddress
+            POOL.getReserveVariableDebtToken(asset)
         );
     }
 
     /// @inheritdoc IPoolDataProvider
     function getInterestRateStrategyAddress(
-        address asset
+        address
     ) external view override returns (address irStrategyAddress) {
-        DataTypes.ReserveDataLegacy memory reserve = IPool(
-            ADDRESSES_PROVIDER.getPool()
-        ).getReserveData(asset);
-
-        return (reserve.interestRateStrategyAddress);
+        return POOL.RESERVE_INTEREST_RATE_STRATEGY();
     }
 
     /// @inheritdoc IPoolDataProvider
     function getFlashLoanEnabled(
         address asset
     ) external view override returns (bool) {
-        DataTypes.ReserveConfigurationMap memory configuration = IPool(
-            ADDRESSES_PROVIDER.getPool()
-        ).getConfiguration(asset);
+        DataTypes.ReserveConfigurationMap memory configuration = POOL
+            .getConfiguration(asset);
 
         return configuration.getFlashLoanEnabled();
     }
 
     /// @inheritdoc IPoolDataProvider
     function getIsVirtualAccActive(
-        address asset
-    ) external view override returns (bool) {
-        DataTypes.ReserveConfigurationMap memory configuration = IPool(
-            ADDRESSES_PROVIDER.getPool()
-        ).getConfiguration(asset);
-
-        return configuration.getIsVirtualAccActive();
+        address
+    ) external pure override returns (bool) {
+        return true;
     }
 
     /// @inheritdoc IPoolDataProvider
     function getVirtualUnderlyingBalance(
         address asset
     ) external view override returns (uint256) {
-        return
-            IPool(ADDRESSES_PROVIDER.getPool()).getVirtualUnderlyingBalance(
-                asset
-            );
+        return POOL.getVirtualUnderlyingBalance(asset);
     }
+
+    /// @inheritdoc IPoolDataProvider
+    function getReserveDeficit(
+        address asset
+    ) external view override returns (uint256) {
+        return POOL.getReserveDeficit(asset);
+    }
 }
