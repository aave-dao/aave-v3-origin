diff --git a/docs/3.4/BaseDelegation.sol b/src/contracts/protocol/tokenization/delegation/BaseDelegation.sol
index c1a95d08..dae21a67 100644
--- a/docs/3.4/BaseDelegation.sol
+++ b/src/contracts/protocol/tokenization/delegation/BaseDelegation.sol
@@ -1,11 +1,15 @@
 // SPDX-License-Identifier: MIT
-pragma solidity ^0.8.0;
+pragma solidity ^0.8.10;

+import {MessageHashUtils} from 'openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol';
 import {ECDSA} from 'openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol';
+import {SafeCast} from 'openzeppelin-contracts/contracts/utils/math/SafeCast.sol';

-import {SafeCast72} from './utils/SafeCast72.sol';
-import {IGovernancePowerDelegationToken} from './interfaces/IGovernancePowerDelegationToken.sol';
-import {DelegationMode} from './DelegationAwareBalance.sol';
+import {WadRayMath} from '../../libraries/math/WadRayMath.sol';
+import {Errors} from '../../libraries/helpers/Errors.sol';
+
+import {IBaseDelegation} from './interfaces/IBaseDelegation.sol';
+import {DelegationMode} from '../base/DelegationMode.sol';

 /**
  * @notice The contract implements generic delegation functionality for the upcoming governance v3
@@ -18,7 +22,7 @@ import {DelegationMode} from './DelegationAwareBalance.sol';
  *   otherwise at least POWER_SCALE_FACTOR should be adjusted !!!
  *   *************************************************************
  */
-abstract contract BaseDelegation is IGovernancePowerDelegationToken {
+abstract contract BaseDelegation is IBaseDelegation {
   struct DelegationState {
     uint72 delegatedPropositionBalance;
     uint72 delegatedVotingBalance;
@@ -81,7 +85,7 @@ abstract contract BaseDelegation is IGovernancePowerDelegationToken {
     DelegationState memory delegationState
   ) internal virtual;

-  /// @inheritdoc IGovernancePowerDelegationToken
+  /// @inheritdoc IBaseDelegation
   function delegateByType(
     address delegatee,
     GovernancePowerType delegationType
@@ -89,13 +93,13 @@ abstract contract BaseDelegation is IGovernancePowerDelegationToken {
     _delegateByType(msg.sender, delegatee, delegationType);
   }

-  /// @inheritdoc IGovernancePowerDelegationToken
+  /// @inheritdoc IBaseDelegation
   function delegate(address delegatee) external override {
     _delegateByType(msg.sender, delegatee, GovernancePowerType.VOTING);
     _delegateByType(msg.sender, delegatee, GovernancePowerType.PROPOSITION);
   }

-  /// @inheritdoc IGovernancePowerDelegationToken
+  /// @inheritdoc IBaseDelegation
   function getDelegateeByType(
     address delegator,
     GovernancePowerType delegationType
@@ -103,7 +107,7 @@ abstract contract BaseDelegation is IGovernancePowerDelegationToken {
     return _getDelegateeByType(delegator, _getDelegationState(delegator), delegationType);
   }

-  /// @inheritdoc IGovernancePowerDelegationToken
+  /// @inheritdoc IBaseDelegation
   function getDelegates(address delegator) external view override returns (address, address) {
     DelegationState memory delegatorBalance = _getDelegationState(delegator);
     return (
@@ -112,7 +116,7 @@ abstract contract BaseDelegation is IGovernancePowerDelegationToken {
     );
   }

-  /// @inheritdoc IGovernancePowerDelegationToken
+  /// @inheritdoc IBaseDelegation
   function getPowerCurrent(
     address user,
     GovernancePowerType delegationType
@@ -122,10 +126,12 @@ abstract contract BaseDelegation is IGovernancePowerDelegationToken {
       ? _getBalance(user)
       : 0;
     uint256 userDelegatedPower = _getDelegatedPowerByType(userState, delegationType);
+
+    // The power returned is the scaled power, assuming an index of 1e27. The voting strategy is based on the same assumption.
     return userOwnPower + userDelegatedPower;
   }

-  /// @inheritdoc IGovernancePowerDelegationToken
+  /// @inheritdoc IBaseDelegation
   function getPowersCurrent(address user) external view override returns (uint256, uint256) {
     return (
       getPowerCurrent(user, GovernancePowerType.VOTING),
@@ -133,7 +139,7 @@ abstract contract BaseDelegation is IGovernancePowerDelegationToken {
     );
   }

-  /// @inheritdoc IGovernancePowerDelegationToken
+  /// @inheritdoc IBaseDelegation
   function metaDelegateByType(
     address delegator,
     address delegatee,
@@ -143,10 +149,11 @@ abstract contract BaseDelegation is IGovernancePowerDelegationToken {
     bytes32 r,
     bytes32 s
   ) external override {
-    require(delegator != address(0), 'INVALID_OWNER');
+    require(delegator != address(0), Errors.ZeroAddressNotValid());
     //solium-disable-next-line
-    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');
-    bytes32 digest = ECDSA.toTypedDataHash(
+    require(block.timestamp <= deadline, Errors.InvalidExpiration());
+
+    bytes32 digest = MessageHashUtils.toTypedDataHash(
       _getDomainSeparator(),
       keccak256(
         abi.encode(
@@ -160,11 +167,12 @@ abstract contract BaseDelegation is IGovernancePowerDelegationToken {
       )
     );

-    require(delegator == ECDSA.recover(digest, v, r, s), 'INVALID_SIGNATURE');
+    require(delegator == ECDSA.recover(digest, v, r, s), Errors.InvalidSignature());
+
     _delegateByType(delegator, delegatee, delegationType);
   }

-  /// @inheritdoc IGovernancePowerDelegationToken
+  /// @inheritdoc IBaseDelegation
   function metaDelegate(
     address delegator,
     address delegatee,
@@ -173,17 +181,19 @@ abstract contract BaseDelegation is IGovernancePowerDelegationToken {
     bytes32 r,
     bytes32 s
   ) external override {
-    require(delegator != address(0), 'INVALID_OWNER');
+    require(delegator != address(0), Errors.ZeroAddressNotValid());
     //solium-disable-next-line
-    require(block.timestamp <= deadline, 'INVALID_EXPIRATION');
-    bytes32 digest = ECDSA.toTypedDataHash(
+    require(block.timestamp <= deadline, Errors.InvalidExpiration());
+
+    bytes32 digest = MessageHashUtils.toTypedDataHash(
       _getDomainSeparator(),
       keccak256(
         abi.encode(DELEGATE_TYPEHASH, delegator, delegatee, _incrementNonces(delegator), deadline)
       )
     );

-    require(delegator == ECDSA.recover(digest, v, r, s), 'INVALID_SIGNATURE');
+    require(delegator == ECDSA.recover(digest, v, r, s), Errors.InvalidSignature());
+
     _delegateByType(delegator, delegatee, GovernancePowerType.VOTING);
     _delegateByType(delegator, delegatee, GovernancePowerType.PROPOSITION);
   }
@@ -213,10 +223,10 @@ abstract contract BaseDelegation is IGovernancePowerDelegationToken {

     // we use uint72, because this is the most optimal for AaveTokenV3
     // To make delegated balance fit into uint72 we're decreasing precision of delegated balance by POWER_SCALE_FACTOR
-    uint72 impactOnDelegationBefore72 = SafeCast72.toUint72(
+    uint72 impactOnDelegationBefore72 = SafeCast.toUint72(
       impactOnDelegationBefore / POWER_SCALE_FACTOR
     );
-    uint72 impactOnDelegationAfter72 = SafeCast72.toUint72(
+    uint72 impactOnDelegationAfter72 = SafeCast.toUint72(
       impactOnDelegationAfter / POWER_SCALE_FACTOR
     );
